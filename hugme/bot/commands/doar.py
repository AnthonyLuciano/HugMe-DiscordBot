import asyncio
import json
import re, discord, logging, os, httpx
from bot.config import Config as app_config
from bot.database import SessionLocal
from bot.database.models import Apoiador, PixConfig
from sqlalchemy.exc import IntegrityError
from datetime import datetime, timedelta, timezone
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput
from discord.utils import sleep_until

logger = logging.getLogger(__name__)
def get_brasilia_time():
        brasilia_offset = timedelta(hours=-3)
        brasilia_tz = timezone(brasilia_offset)
        return datetime.now(brasilia_tz)


# --- Modal de Doa√ß√£o (Formul√°rio Pix) ---
class DonationModal(Modal, title="Fazer Doa√ß√£o via Pix"):
    def __init__(self, bot):
        super().__init__(
            custom_id="pix_donation_modal",
            timeout=180.0
        )
        self.bot = bot
        self.redirect = os.getenv('REDIRECT_URL')
        
    amount = TextInput(
        label="Valor da Doa√ß√£o Esperada <3 (R$)",
        placeholder="Ex: 10.00",
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # --- Valida√ß√£o do valor ---
            try:
                amount = float(self.amount.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå Valor inv√°lido. Por favor, insira um n√∫mero v√°lido.",
                    ephemeral=True
                )
                return

            reference_id = f"doacao_discord_user_{interaction.user.id}"
            amount_cents = int(amount * 100)
            guild_id = str(interaction.guild.id) if interaction.guild else "0"

            # --- Salva ou atualiza no banco ---
            with SessionLocal() as session:
                try:
                    apoiador = session.query(Apoiador).filter_by(
                        discord_id=str(interaction.user.id),
                        guild_id=guild_id
                    ).first()
                    
                    if apoiador:
                        # Atualiza apenas o id_pagamento e dados
                        apoiador.id_pagamento = reference_id
                        apoiador.tipo_apoio = "pix"
                        apoiador.valor_doacao = amount_cents
                        apoiador.data_inicio = datetime.now(timezone.utc)
                        apoiador.ja_pago = False
                    else:
                        # Cria novo registro
                        apoiador = Apoiador(
                            discord_id=str(interaction.user.id),
                            guild_id=guild_id,
                            id_pagamento=reference_id,
                            tipo_apoio="pix",
                            valor_doacao=amount_cents,
                            data_inicio=datetime.now(timezone.utc),
                            ja_pago=False
                        )
                        session.add(apoiador)

                    session.commit()
                except Exception as e:
                    session.rollback()
                    logger.error(f"Erro ao salvar doa√ß√£o no banco: {e}")
                    await interaction.response.send_message(
                        "‚ùå Erro ao registrar a doa√ß√£o. Tente novamente mais tarde.",
                        ephemeral=True
                    )
                    return

            # --- Busca configura√ß√£o PIX ---
            with SessionLocal() as session:
                config = session.query(PixConfig).first()
                if not config:
                    await interaction.response.send_message(
                        "‚ùå Configura√ß√£o PIX n√£o encontrada.",
                        ephemeral=True
                    )
                    return
                chave = config.chave
                image_url = config.static_qr_url

            # --- Envia embed pro usu√°rio ---
            embed = discord.Embed(
                title=f"üí∞ Doa√ß√£o de R${amount:.2f} via PIX",
                description="Escaneie o QR Code ou copie o c√≥digo abaixo:",
                color=0x32CD32
            )
            embed.add_field(name="Valor", value=f"R$ {amount:.2f}", inline=True)
            embed.add_field(name="Copia e Cola", value=f"`{chave}`", inline=False)
            embed.set_image(url=image_url)

            #footer pro usuario e timer de auto rejei√ß√£o
            timeout = get_brasilia_time() + timedelta(minutes=5)
            restante = timeout - get_brasilia_time()
            mins, segs, = divmod(int(restante.total_seconds()), 60)
            embed.set_footer(text=f"‚è≥ Confirma√ß√£o Manual pendente | Tempo restante: {mins}m {segs}s")
            
            user_view = View(timeout=None)
            user_view.add_item(Button(
                style=discord.ButtonStyle.success,
                label="j√° paguei",
                custom_id=f"user_paid_{reference_id}"))
            user_view.add_item(Button(
                style=discord.ButtonStyle.danger,
                label="Cancelar Doa√ß√£o",
                custom_id=f"user_cancel_{reference_id}"))
            
            await interaction.response.send_message(embed=embed, ephemeral=False)
            user_message = await interaction.original_response()
            
            async def autodelete(msg: discord.Message, delay_minutos: int = 10):
                delete_time = get_brasilia_time() + timedelta(minutes=delay_minutos)
                while True:
                    if get_brasilia_time() >= delete_time:
                        try:
                            await msg.delete()
                        except discord.NotFound:
                            pass
                        except discord.Forbidden:
                            pass
                        break
                    await asyncio.sleep(5)
            asyncio.create_task(autodelete(user_message))
                    
                
            # inicia timer de rejei√ß√£o autom√°tica
            doar_cog = self.bot.get_cog("DoarCommands")
            if doar_cog:
                asyncio.create_task(doar_cog.update_timer_embed(
                    message=user_message,
                    reference_id=reference_id,
                    timeout=timeout
                    ))

            # --- Notifica admins e inicia timer ---
            channel_id = app_config.DONO_LOG_CHANNEL
            donolog = await self.bot.fetch_channel(channel_id)
            if donolog:
                view = View(timeout=None)
                view.add_item(Button(
                    style=discord.ButtonStyle.success,
                    label="Confirmar Pagamento",
                    custom_id=f"confirm_payment_{reference_id}"
                ))
                view.add_item(Button(
                    style=discord.ButtonStyle.danger,
                    label="Rejeitar Pagamento",
                    custom_id=f"reject_payment_{reference_id}"
                ))
                
                notification_embed = discord.Embed(
                    title="üìä Nova Doa√ß√£o Recebida",
                    description=f"**Usu√°rio:** {interaction.user.mention} (`{interaction.user.id}`)\n**Valor:** R${amount:.2f}\n\n",
                    color=0x00FF00
                )
                await donolog.send(
                    content="Nova doa√ß√£o registrada!",
                    embeds=[notification_embed],
                    view=view
                )

        except Exception as e:
            logger.error(f"Erro ao processar doa√ß√£o: {e}")
            await interaction.response.send_message(
                "‚ùå Ocorreu um erro ao processar sua doa√ß√£o. Tente novamente mais tarde.",
                ephemeral=True
            )


# --- Views para DM ---
class DMConfirmationView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=180.0)
        self.bot = bot

    @discord.ui.button(label="Sim, Continuar", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üíñ Apoie Nossa Comunidade!",
            description=(
                "Escolha a forma de doa√ß√£o:\n\n"
                "üí∞ **Pix**: Doa√ß√£o √∫nica ou recorrente.\n"
                "‚òï **Ko-fi**: Doa√ß√£o mensal via cart√£o.\n\n"
                "Clique nos bot√µes abaixo para mais informa√ß√µes."
            ),
            color=discord.Color.green()
        )
        view = DoarView(self.bot)
        await interaction.response.edit_message(embed=embed, view=view)

    @discord.ui.button(label="Cancelar", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.edit_message(
            content="‚ùå Doa√ß√£o cancelada.",
            view=None,
            embed=None,
            ephemeral=True
        )


class DoarView(View):
    def __init__(self, bot):
        super().__init__(timeout=180)
        self.bot = bot
        self.ngrok_url = os.getenv('REDIRECT_URL')

    @discord.ui.button(label="Pix", style=discord.ButtonStyle.green, custom_id="doar_pix")
    async def doar_pix_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(DonationModal(bot=self.bot))

    @discord.ui.button(label="‚òï Doar via Ko-fi", style=discord.ButtonStyle.secondary, custom_id="doar_kofi")
    async def doar_kofi_button(self, interaction: discord.Interaction, button: Button):
        embed = discord.Embed(
            title="‚òï Doa√ß√£o via Ko-fi",
            description=(
                "Obrigado por considerar doar via Ko-fi!\n\n"
                "**‚ö†Ô∏èAntes de prosseguir‚ö†Ô∏è:**\n"
                "Quando for Doar, coloque o seu nome de usu√°rio do Discord.\n"
                "Caso contr√°rio, ser√° feita verifica√ß√£o manual.\n"
                "- Visite o link abaixo para continuar.\n\n"
                "[Clique aqui para doar no Ko-fi](https://ko-fi.com/W7W81J60WA)"
            ),
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)


# --- Comando /doar ---
class DoarCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.timer_tasks = {}

    async def update_timer_embed(self, message: discord.Message, reference_id: str, timeout: datetime):
        try:
            if not message.embeds:
                return

            embed = message.embeds[0]
            
            async def timer_task():
                try:
                    while True:
                        remaining = timeout - get_brasilia_time()
                        total_secs = int(remaining.total_seconds())
                
                        if total_secs <= 0:
                            embed.set_footer(text="‚åõ Pagamento n√£o confirmado (expirado)")
                            await message.edit(embeds=[embed], view=None)
                            break
                
                        mins, secs = divmod(total_secs, 60)
                        embed.set_footer(text=f"‚è≥ Confirma√ß√£o pendente | Tempo restante: {mins}m {secs}s")
                        await message.edit(embeds=[embed])
                        await asyncio.sleep(5)
                except asyncio.CancelledError:
                    pass
                except Exception as e:
                    logger.info(f"erro no timer task: {e}")
                finally:
                    if reference_id in self.timer_tasks:
                        del self.timer_tasks[reference_id]
                        
                task = asyncio.create_task(timer_task())
                self.timer_tasks[reference_id] = task
                
        except Exception as e:
            logger.error(f"Erro no timer embed: {e}")
            if reference_id in self.timer_tasks:
                del self.timer_tasks[reference_id]

    @commands.Cog.listener()
    async def on_interaction(self, interaction: discord.Interaction):
        if not interaction.data or "custom_id" not in interaction.data:
            return

        custom_id = interaction.data["custom_id"]
        
        if custom_id.startswith("user_paid_"):
            reference_id = custom_id.replace("user_paid_", "")
            await interaction.response.send_message(
                "‚úÖ Obrigado pelo pagamento! Aguarde a confirma√ß√£o dos administradores.",
                ephemeral=True
            )

        elif custom_id.startswith("user_cancel_"):
            reference_id = custom_id.replace("user_cancel_", "")
            # Cancela timer se existir
            if reference_id in self.timer_tasks:
                self.timer_tasks[reference_id].cancel()
            
            await interaction.response.edit_message(
                content="‚ùå Doa√ß√£o cancelada pelo usu√°rio.",
                view=None,
                embed=None
            )

        if custom_id.startswith("confirm_payment_"):
            reference_id = custom_id.replace("confirm_payment_", "")
            message = interaction.message

            if reference_id in self.timer_tasks:
                self.timer_tasks[reference_id].cancel()
            
            embed = message.embeds[0]
            embed.set_footer(text="‚úÖ Pagamento confirmado")
            await message.edit(embeds=[embed], view=None)

            with SessionLocal() as session:
                apoiador = session.query(Apoiador).filter_by(id_pagamento=reference_id).first()
                if apoiador:
                    apoiador.ja_pago = True
                    apoiador.ultimo_pagamento = get_brasilia_time()
                    session.commit()

            await interaction.response.send_message(
                f"‚úÖ Pagamento confirmado para refer√™ncia {reference_id}",
                ephemeral=True
            )

        elif custom_id.startswith("reject_payment_"):
            reference_id = custom_id.replace("reject_payment_", "")
            embed = interaction.message.embeds[0]
            embed.set_footer(text="‚ùå Pagamento rejeitado")
            if reference_id in self.timer_tasks:
                self.timer_tasks[reference_id].cancel()
            await interaction.message.edit(embeds=[embed], view=None)

            await interaction.response.send_message(
                f"‚ùå Pagamento rejeitado para refer√™ncia {reference_id}",
                ephemeral=True
            )

    @commands.hybrid_command(name="doar", description="Inicie o processo de doa√ß√£o para a comunidade")
    async def doar(self, ctx: commands.Context):
        try:
            if not ctx.author:
                raise ValueError("Contexto inv√°lido - author ausente")

            if not ctx.guild:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Doa√ß√£o via Mensagem Direta",
                    description=(
                        "Doa√ß√µes em DMs **n√£o concedem recompensas** em servidores.\n"
                        "Caso deseje tais recompensas use o comando no servidor.\n"
                        "Ou notifique um Admin ou o Desenvolvedor no servidor de sua doa√ß√£o.\n\n"
                        "**Deseja continuar mesmo assim?**"
                    ),
                    color=discord.Color.orange()
                )
                view = DMConfirmationView(self.bot)
                await ctx.send(embed=embed, view=view, ephemeral=True)
                return

            embed = discord.Embed(
                title="üíñ Apoie Nossa Comunidade!",
                description=(
                    "Escolha a forma de doa√ß√£o:\n\n"
                    "üí∞ **Pix**: Doa√ß√£o √∫nica ou recorrente.\n"
                    "‚òï **Ko-fi**: Doa√ß√£o mensal via cart√£o.\n\n"
                    "Clique nos bot√µes abaixo para mais informa√ß√µes."
                ),
                color=discord.Color.green()
            )
            view = DoarView(self.bot)
            await ctx.send(embed=embed, view=view, ephemeral=True)

        except discord.Forbidden:
            await ctx.send("‚ùå Sem permiss√µes para enviar mensagens aqui!", ephemeral=True)
        except AttributeError as e:
            logger.error(f"Erro de atributo no comando doar: {str(e)}")
            await ctx.send("‚ùå Ocorreu um erro interno. Tente novamente mais tarde.", ephemeral=True)
        except Exception as e:
            logger.error(f"Erro inesperado em doar: {str(e)}", exc_info=True)
            await ctx.send("‚ùå Falha ao processar o comando. Notifique os administradores.", ephemeral=True)


# --- Setup ---
async def setup(bot):
    await bot.add_cog(DoarCommands(bot))
