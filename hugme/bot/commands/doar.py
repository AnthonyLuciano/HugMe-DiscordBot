import json
import re, discord, logging, os, httpx
from bot.config import Config as app_config
from bot.database import SessionLocal
from bot.database.models import Apoiador, PixConfig
from sqlalchemy.exc import IntegrityError
from datetime import datetime, timedelta, timezone
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput

logger = logging.getLogger(__name__)

# --- Modal de Doa√ß√£o (Formul√°rio Pix) ---
class DonationModal(Modal, title="Fazer Doa√ß√£o via Pix"):
    def __init__(self, bot):
        super().__init__(
            custom_id="pix_donation_modal",
            timeout=180.0
        )
        self.bot = bot
        self.redirect = os.getenv('REDIRECT_URL')
        
    amount = TextInput(
        label="Valor da Doa√ß√£o Esperada <3 (R$)",
        placeholder="Ex: 10.00",
        required=True
    )
   

    async def on_submit(self, interaction: discord.Interaction):
        try:
            amount = float(self.amount.value)

            reference_id = f"doacao_discord_user_{interaction.user.id}"
            amount_cents = int(amount * 100)
            guild_id = str(interaction.guild.id) if interaction.guild else "0"
            
            with SessionLocal() as session:
                apoiador = Apoiador(
                    discord_id=str(interaction.user.id),
                    guild_id=guild_id,
                    id_pagamento=reference_id,
                    tipo_apoio="pix",
                    valor_doacao=amount_cents,
                    data_inicio=datetime.now(timezone.utc),
                    ja_pago=False
                )
                session.add(apoiador)
                try:
                    session.commit()
                except IntegrityError:
                    session.rollback()
                    apoiador = session.query(Apoiador).filter_by(
                        discord_id=str(interaction.user.id),
                        guild_id=guild_id
                    ).first()
                    if apoiador:
                        apoiador.id_pagamento = reference_id
                        session.commit()
            brasilia_offset = timedelta(hours=-3)
            brasilia_tz = timezone(brasilia_offset)
            expiration = (datetime.now(brasilia_tz) + timedelta(days=180)).isoformat()
            
            with SessionLocal() as session:
                config = session.query(PixConfig).first()
                if not config:
                    raise ValueError("Configura√ß√£o PIX n√£o encontrada no banco de dados.")
                chave = config.chave
                image_url = config.static_qr_url
                if not image_url:
                    raise ValueError("URL do QR Code PIX n√£o configurada.")
                if not chave:
                    raise ValueError("Chave PIX n√£o configurada.")

            embed = discord.Embed(
                title=f"üí∞ Doa√ß√£o de R${amount:.2f} via PIX",
                description="Escaneie o QR Code ou copie o c√≥digo abaixo:",
                color=0x32CD32
            )
            embed.add_field(name="Valor", value=f"R$ {amount:.2f}", inline=True)
            embed.add_field(name="Copia e Cola", value=f"`{chave}`", inline=False)
            embed.set_image(url=image_url)
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            await interaction.followup.send(
                "‚è≥ Aten√ß√£o: sua doa√ß√£o pode levar alguns minutos para ser processada. "
                "Obrigado pelo apoio! ü§ó",
                ephemeral=True
                )

            
            channel_id = app_config.DONO_LOG_CHANNEL
            donolog = await self.bot.fetch_channel(channel_id)
            
            if donolog:
                view = View(timeout=None)
                view.add_item(Button(
                    style=discord.ButtonStyle.success,
                    label="Sim (Confirmar Pagamento)",
                    custom_id=f"confirm_payment_{reference_id}"
                ))
                view.add_item(Button(
                    style=discord.ButtonStyle.danger,
                    label="N√£o",
                    custom_id=f"reject_payment_{reference_id}"
                ))
                
                notification_embed = discord.Embed(
                    title="üìä Nova Doa√ß√£o Recebida",
                    description=f"**Usu√°rio:** {interaction.user.mention} (`{interaction.user.id}`)\n"
                    f"**Valor:** R${amount:.2f} \n\n",
                    color=0x00FF00
                )
                await donolog.send(
                    content="Nova doa√ß√£o registrada!",
                    embeds=[notification_embed],
                    view=view
                )
        except Exception as e:
            logger.error(f"Erro ao processar doa√ß√£o: {e}")
            await interaction.response.send_message(
                "‚ùå Ocorreu um erro ao processar sua doa√ß√£o. Tente novamente mais tarde.",
                ephemeral=True
            )

class DMConfirmationView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=180.0)
        self.bot = bot

    @discord.ui.button(label="Sim, Continuar", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Mostra o mesmo embed de op√ß√µes que seria exibido em servidores
        embed = discord.Embed(
            title="üíñ Apoie Nossa Comunidade!",
            description=(
                "Escolha a forma de doa√ß√£o:\n\n"
                "üí∞ **Pix**: Doa√ß√£o √∫nica ou recorrente.\n"
                "‚òï **Ko-fi**: Doa√ß√£o mensal via cart√£o.\n\n"
                "Clique nos bot√µes abaixo para mais informa√ß√µes."
            ),
            color=discord.Color.green()
        )
        view = DoarView(self.bot)  # View normal com bot√µes PIX/Ko-fi
        await interaction.response.edit_message(embed=embed, view=view)

    @discord.ui.button(label="Cancelar", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.edit_message(
            content="‚ùå Doa√ß√£o cancelada.",
            view=None,
            embed=None,
            ephemeral = True
        )
    
class DoarView(View):
    def __init__(self, bot):
        super().__init__(timeout=180)
        self.bot = bot
        self.ngrok_url = os.getenv('REDIRECT_URL')

    @discord.ui.button(label="Pix", style=discord.ButtonStyle.green, custom_id="doar_pix")
    async def doar_pix_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(DonationModal(bot=self.bot))

    @discord.ui.button(label="‚òï Doar via Ko-fi", style=discord.ButtonStyle.secondary, custom_id="doar_kofi")
    async def doar_kofi_button(self, interaction: discord.Interaction, button: Button):
        # Embed de aviso antes de redirecionar
        embed = discord.Embed(
            title="‚òï Doa√ß√£o via Ko-fi",
            description=(
                "Obrigado por considerar doar via Ko-fi!\n\n"
                "**‚ö†Ô∏èAntes de prosseguir‚ö†Ô∏è:**\n"
                "Quando for Doar, Coloque o seu nome de usuario do discord\n"   
                "Caso contrario tera que ser feito verifica√ß√£o manual\n"
                "- Visite o link abaixo para continuar.\n\n"
                "[Clique aqui para doar no Ko-fi](https://ko-fi.com/W7W81J60WA)"
            ),
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)



# --- Comando /doar ---
class DoarCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_interaction(self, interaction: discord.Interaction):
        if not interaction.data or "custom_id" not in interaction.data:
            return
        custom_id = interaction.data["custom_id"]
        if custom_id.startswith("confirm_payment_"):
            reference_id = custom_id.replace("confirm_payment_", "")
            await interaction.response.send_message(
                f"‚úÖ Pagamento confirmado para refer√™ncia {reference_id}",
                ephemeral=True
                )
        elif custom_id.startswith("reject_payment_"):
            reference_id = custom_id.split("_")[2]
            await interaction.response.send_message(
                f"‚ùå Pagamento rejeitado para refer√™ncia {reference_id}",
                ephemeral=True
            )
            
            
    @commands.hybrid_command(name="doar", description="Inicie o processo de doa√ß√£o para a comunidade")
    async def doar(self, ctx: commands.Context):
        try:
            if not ctx.author:
                raise ValueError("Contexto inv√°lido - author ausente")
            
            if not ctx.guild:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Doa√ß√£o via Mensagem Direta",
                    description=(
                        "Doa√ß√µes em DMs **n√£o concedem recompensas** em servidores.\n"
                        "Caso deseje tais recompen√ßas use o comando no servidor \n"
                        "Ou notifique um Admin ou o Desenvolvedor no servidor de sua doa√ß√£o\n -MrMedicMain(dev)\n\n"
                        "**Deseja continuar mesmo assim?**"
                    ),
                    color=discord.Color.orange()
                )
                view = DMConfirmationView(self.bot)
                await ctx.send(embed=embed, view=view, ephemeral = True)
                return


            embed = discord.Embed(
                title="üíñ Apoie Nossa Comunidade!",
                description=(
                    "Escolha a forma de doa√ß√£o:\n\n"
                    "üí∞ **Pix**: Doa√ß√£o √∫nica ou recorrente.\n"
                    "‚òï **Ko-fi**: Doa√ß√£o mensal via cart√£o.\n\n"
                    "Clique nos bot√µes abaixo para mais informa√ß√µes."
                ),
                color=discord.Color.green()
            )
        
            view = DoarView(self.bot)
            await ctx.send(embed=embed, view=view, ephemeral = True)

        except discord.Forbidden:
            await ctx.send("‚ùå Sem permiss√µes para enviar mensagens aqui!", ephemeral=True)
        except AttributeError as e:
            logger.error(f"Erro de atributo no comando doar: {str(e)}")
            await ctx.send("‚ùå Ocorreu um erro interno. Tente novamente mais tarde.", ephemeral=True)
        except Exception as e:
            logger.error(f"Erro inesperado em doar: {str(e)}", exc_info=True)
            await ctx.send("‚ùå Falha ao processar o comando. Notifique os administradores.", ephemeral=True)
# --- Setup ---
async def setup(bot):
    await bot.add_cog(DoarCommands(bot))